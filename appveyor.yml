image:
- Visual Studio 2017
- Ubuntu
version: 1.0.{build}
configuration: Release
skip_branch_with_pr: true
install:
- git submodule update --init --recursive
assembly_info:
  patch: true
  file: AntlrGrammarEditor\AssemblyInfo.cs;
  assembly_version: '{version}'
  assembly_file_version: '{version}'
  assembly_informational_version: '{version}'
before_build:
- ps: |
    if ($isLinux) {
        sudo apt-get -y install golang-go

        $env:GOPATH = "$HOME/go"
    }

    if ($isWindows) {
        py -2 -V
    } else {
        python2 -V
    }

    if ($isWindows) {
        py -3 -V
    } else {
        python3 -V
    }

    node -v

    go version
build_script:
- ps: |
    if ($isWindows) {
        python -m pip install --upgrade pip

        C:\Python27-x64\Scripts\pip.exe install antlr4-python2-runtime

        C:\Python35-x64\Scripts\pip.exe install antlr4-python3-runtime
    } else {
        sudo pip2 install antlr4-python2-runtime

        sudo pip3 install antlr4-python3-runtime
    }

    npm init -y

    npm install antlr4

    go get github.com/antlr/antlr4/runtime/Go/antlr

    dotnet build AntlrGrammarEditor.sln -c Release

    dotnet publish DesktopAntlrGrammarEditor/DesktopAntlrGrammarEditor.csproj -c Release -o bin/Gui
test_script:
  - dotnet test "AntlrGrammarEditor.Tests/AntlrGrammarEditor.Tests.csproj" -c Release
after_test:
- ps: |
    cd DesktopAntlrGrammarEditor/bin/Gui

    7z a Dage-$env:APPVEYOR_BUILD_VERSION.zip *.dll *.config *.json runtimes Generators AntlrRuntimes

    Push-AppveyorArtifact Dage-$env:APPVEYOR_BUILD_VERSION.zip